/*****************************************************************************
 * DASH MPD parsing library in C++: URI class
 *****************************************************************************
 * Copyright: (C) 2025 British Broadcasting Corporation
 * Author(s): David Waring <david.waring2@bbc.co.uk>
 * License: LGPLv3
 *
 * For full license terms please see the LICENSE file distributed with this
 * library or refer to: https://www.gnu.org/licenses/lgpl-3.0.txt.
 */
#include <iostream>
#include <regex>
#include <string>

#include <libxml++/libxml++.h>

#include "libmpd++/macros.hh"

#include "libmpd++/URI.hh"

LIBPARSEMPD_NAMESPACE_BEGIN

void URI::validate()
{
    // check m_uri is a valid URI string and throw std::domain_error if not
    static const std::regex validator_regex("^[a-zA-Z][-a-zA-Z0-9+.]*:(?://(?:(?:[-a-zA-Z0-9._~!$&'()*+,;=:]|%[a-fA-F0-9][a-fA-F0-9])*@)?(?:\\[(?:v[a-fA-F0-9]+\\.[-a-zA-Z0-9._~!$&'()*+,;=:]+|(?:(?:(?:[a-fA-F0-9]){1,4}:){6}(?:(?:[a-fA-F0-9]){1,4}:(?:[a-fA-F0-9]){1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|::(?:(?:[a-fA-F0-9]){1,4}:){5}(?:(?:[a-fA-F0-9]){1,4}:(?:[a-fA-F0-9]){1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[a-fA-F0-9]){1,4})?::(?:(?:[a-fA-F0-9]){1,4}:){4}(?:(?:[a-fA-F0-9]){1,4}:(?:[a-fA-F0-9]){1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:(?:[a-fA-F0-9]){1,4}:){0,1}(?:[a-fA-F0-9]){1,4})?::(?:(?:[a-fA-F0-9]){1,4}:){3}(?:(?:[a-fA-F0-9]){1,4}:(?:[a-fA-F0-9]){1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:(?:[a-fA-F0-9]){1,4}:){0,2}(?:[a-fA-F0-9]){1,4})?::(?:(?:[a-fA-F0-9]){1,4}:){2}(?:(?:[a-fA-F0-9]){1,4}:(?:[a-fA-F0-9]){1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:(?:[a-fA-F0-9]){1,4}:){0,3}(?:[a-fA-F0-9]){1,4})?::(?:[a-fA-F0-9]){1,4}:(?:(?:[a-fA-F0-9]){1,4}:(?:[a-fA-F0-9]){1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:(?:[a-fA-F0-9]){1,4}:){0,4}(?:[a-fA-F0-9]){1,4})?::(?:(?:[a-fA-F0-9]){1,4}:(?:[a-fA-F0-9]){1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:(?:[a-fA-F0-9]){1,4}:){0,5}(?:[a-fA-F0-9]){1,4})?::(?:[a-fA-F0-9]){1,4}|(?:(?:(?:[a-fA-F0-9]){1,4}:){0,6}(?:[a-fA-F0-9]){1,4})?::))\\]|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}|(?:[-a-zA-Z0-9._~!$&'()*+,;=]|%[a-fA-F0-9][a-fA-F0-9])*)(?::[0-9]*)?(?:/(?:[-a-zA-Z0-9._~!$&'()*+,;=:@]|%[a-fA-F0-9][a-fA-F0-9])*)*|/(?:(?:[-a-zA-Z0-9._~!$&'()*+,;=:@]|%[a-fA-F0-9][a-fA-F0-9])+(?:/(?:[-a-zA-Z0-9._~!$&'()*+,;=:@]|%[a-fA-F0-9][a-fA-F0-9])*)*)?|(?:[-a-zA-Z0-9._~!$&'()*+,;=:@]|%[a-fA-F0-9][a-fA-F0-9])+(?:/(?:[-a-zA-Z0-9._~!$&'()*+,;=:@]|%[a-fA-F0-9][a-fA-F0-9])*)*|)(?:\\?(?:[-a-zA-Z0-9._~!$&'()*+,;=:@/?]|%[a-fA-F0-9][a-fA-F0-9])*)?(?:#(?:[-a-zA-Z0-9._~!$&'()*+,;=:@/?]|%[a-fA-F0-9][a-fA-F0-9])*)?$", std::regex_constants::ECMAScript);
    if (!std::regex_match(m_uri, validator_regex))
        throw std::domain_error("Not a valid URI");
}

URI::URI(xmlpp::Node &node)
{
    // Take all text in the element as the URI
    m_uri = node.eval_to_string(".//text()");
    validate();
}

void URI::setXMLElement(xmlpp::Element &elem) const
{
    elem.add_child_text(m_uri);
}

LIBPARSEMPD_NAMESPACE_END

std::ostream &operator<<(std::ostream &os, const LIBPARSEMPD_NAMESPACE_CLASS(URI) &uri)
{
    os << static_cast<const std::string&>(uri);
    return os;
}

/* vim:ts=8:sts=4:sw=4:expandtab:
 */
